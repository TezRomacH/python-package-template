{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3': 'License :: OSI Approved :: BSD License',
    'GNU GPL v3.0': 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
} -%}
{%- set python_version_splitted = cookiecutter.minimal_python_version.split('.') | map('int') | list -%}
# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool]
[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
authors = ["{{ cookiecutter.organization }} <{{ cookiecutter.email }}>"]
license = "{{ cookiecutter.license }}"
repository = "https://github.com/{{ cookiecutter.github_name }}/{{ cookiecutter.project_name }}"
homepage = "https://github.com/{{ cookiecutter.github_name }}/{{ cookiecutter.project_name }}"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "{{ license_classifiers[cookiecutter.license] }}",
  "Programming Language :: Python :: 3",
  {%- for minor_version in cookiecutter._all_python_minor_version if minor_version >= python_version_splitted[1] %}
  "Programming Language :: Python :: 3.{{ minor_version }}",{% endfor %}
]

{% if cookiecutter.create_example_template == 'cli' -%}[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"{{ cookiecutter.project_name }}" = "{{ cookiecutter.project_name.lower().replace(' ', '_').replace('-', '_') }}.__main__:app"{%- endif %}

[tool.poetry.dependencies]
python = "^{{ cookiecutter.minimal_python_version }}"
{% if cookiecutter.minimal_python_version == '3.7' -%}importlib_metadata = {version = "^4.5.0", python = "<3.8"}{%- endif -%}
{%+ if cookiecutter.create_example_template == 'cli' %}
typer = {extras = ["all"], version = "^0.4.0"}
rich = "^10.14.0"
{% endif %}
[tool.poetry.dev-dependencies]
bandit = "^1.7.1"
black = {version = "^21.10b0", allow-prereleases = true}
darglint = "^1.8.1"
isort = {extras = ["colors"], version = "^5.10.1"}
mypy = "^0.910"
mypy-extensions = "^0.4.3"
pre-commit = "^2.15.0"
pydocstyle = "^6.1.1"
pylint = "^2.11.1"
pytest = "^6.2.5"
pyupgrade = "^2.29.1"
safety = "^1.10.3"
coverage = "^6.1.2"
coverage-badge = "^1.1.0"
pytest-html = "^3.1.1"
pytest-cov = "^3.0.0"
toml = {version = "^0.10.2", optional = true}
bump2version = {version = "^1.0.1", optional = true}

[tool.black]
# https://github.com/psf/black
target-version = ["py{{ cookiecutter.minimal_python_version.replace('.', '') }}"]
line-length = {{ cookiecutter.line_length }}
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = {{ cookiecutter.minimal_python_version.replace('.', '') }}
line_length = {{ cookiecutter.line_length }}

known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = {{ cookiecutter.minimal_python_version }}
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

[tool.coverage.run]
source = ["tests"]

[coverage.paths]
source = "{{ cookiecutter.project_name }}"

[coverage.run]
branch = true

[coverage.report]
fail_under = 50
show_missing = true